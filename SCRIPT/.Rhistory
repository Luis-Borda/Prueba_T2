test$rooms[is.na(test$rooms)] <- 0
test$rooms_tot <- apply(test[, c("rooms", "bedrooms")], 1, max)
sapply(train, function(x) sum(is.na(x)))
sapply(test, function(x) sum(is.na(x)))
substr(train$description, 1, 500)
library(stringi)
##Volvemos todo minuscula y eliminamos tildes tildes
train$description <- tolower(train$description)
train$description <- iconv(train$description, from = "UTF-8", to = "ASCII//TRANSLIT")
substr(train$description, 1, 500)
Metros <- str_extract(train$description, "\\d+\\s*(mts|m2|metros)")
train <- cbind(train, area = Metros)
Area_sin_texto <- gsub("m2", "", Metros)
Area_sin_texto <- gsub("[[:alpha:]]", "", Area_sin_texto)
as.numeric(Area_sin_texto)
train <- cbind(train, area_m2 = Area_sin_texto)
sapply(train, function(x) sum(is.na(x)))
train$area_tot <- ifelse(is.na(train$surface_covered), train$area_m2, train$surface_covered)
sapply(train, function(x) sum(is.na(x)))
substr(test$description, 1, 500)
test$description <- tolower(test$description)
test$description <- iconv(test$description, from = "UTF-8", to = "ASCII//TRANSLIT")
substr(test$description, 1, 500)
Metros <- str_extract(test$description, "\\d+\\s*(mts|m2|metros)")
test <- cbind(test, area = Metros)
Area_sin_texto <- gsub("m2", "", Metros)
Area_sin_texto <- gsub("[[:alpha:]]", "", Area_sin_texto)
as.numeric(Area_sin_texto)
test <- cbind(test, area_m2 = Area_sin_texto)
sapply(test, function(x) sum(is.na(x)))
test$area_tot <- ifelse(is.na(test$surface_covered), test$area_m2, test$surface_covered)
sapply(test, function(x) sum(is.na(x)))
#Imputando faltantes en area con KNN
train <-  kNN(train, variable = c("area_tot"), k = 6)
train$area_tot_num <- as.numeric(train$area_tot)
train$area_tot <- round(train$area_tot_num,0)
summary(train$area_tot)
test <-  kNN(test, variable = c("area_tot"), k = 6)
test$area_tot_num <- as.numeric(test$area_tot)
test$area_tot <- round(test$area_tot_num,0)
summary(test$area_tot)
sapply(train, function(x) sum(is.na(x)))
sapply(test, function(x) sum(is.na(x)))
train <- select(train, property_id,  bathrooms, area_tot, bathrooms_imp,
lat, property_type, lon, distancia_parque, distancia_universidad,
rooms_tot, area_tot_imp,  price, distancia_avenida_principal)
iqr_area_tot <- IQR(train_new$area_tot)
summary(train_sin_outliers)
rm(list = ls())
rm(list = ls())
# Librerias
library(pacman)
p_load(tidyverse, readr, skimr, fastDummies, rpart, caret, glmnet, MLmetrics,
rstudioapi, # Get the location of this script
rio, # Import data easily
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un poligono
tmaptools, # geocode_OSM()
sf, # Leer/escribir/manipular datos espaciales
stargazer, # Report LM models
osmdata)
test <- read_csv("E:/USB/MECA-CLASES/5. BIG DATA/TALLER 2/DATA/test.csv")
train <- read_csv("E:/USB/MECA-CLASES/5. BIG DATA/TALLER 2/DATA/train.csv")
glimpse(train)
# Eliminamos las observaciones que no tienen información de latitud o longitud
filtro <- is.na(train$lat) | is.na(train$lon)
train <- train[!filtro, ]
# Observaciones sólo en Bogotá
limites <- getbb("Bogota Colombia")
##PUNTOS DE LA BASE DE DATOS EN EL MAPA--------------------------------------
leaflet()%>%
addTiles()%>%
addCircles(lng=train$lon,
lat=train$lat)
##Limitamos sólo para Bogotá
filtro1 <- between(train$lon, limites[1, "min"], limites[1, "max"])
filtro2 <- between(train$lat, limites[2, "min"], limites[2, "max"])
train <- train[(filtro1 & filtro2),]
#Mapa con número de cuartos resaltados
table(train$rooms)
train$rooms[!(train$rooms %in% as.character(1:10))] = NA
color<-rep(NA, nrow(train))
color[train$rooms == "1"] <- "#7400b8"
color[train$rooms == "2"] <- "#6930c3"
color[train$rooms == "3"] <- "#5e60ce"
color[train$rooms == "4"] <- "#5390d9"
color[train$rooms == "5"] <- "#4ea8de"
color[train$rooms == "6"] <- "#48bfe3"
color[train$rooms == "7"] <- "#56cfe1"
color[train$rooms == "8"] <- "#64dfdf"
color[train$rooms == "9"] <- "#72efdd"
color[train$rooms == "10"] <- "#80ffdb"
leaflet()%>%
addTiles()%>%
addCircles(lng=train$lon,
lat=train$lat,
col = color)
##Añadiendo precio en html
leaflet()%>%
addTiles()%>%
addCircles(lng=train$lon,
lat=train$lat,
col = train$price)
## DISTANCIA A PARQUES-------------------------------------------------------------
available_tags("leisure")
parques <- opq(bbox=getbb("Bogota Colombia"))%>%
add_osm_feature(key = "leisure", value = "park")
#librería sf:
parques_sf <- osmdata_sf(parques)
parques_geometria <- parques_sf$osm_polygons%>%
select (osm_id, name)
#En el mapa parques y apartamentos por número de cuartos
leaflet()%>%
addTiles()%>%
addPolygons(data = parques_geometria, col = "#007200",
opacity = 0.8, popup= parques_geometria)%>%
addCircles(lng=train$lon,
lat=train$lat,
col = color)
#Distancia a parques utilziando centroides
centroides<- gCentroid(as(parques_geometria$geometry, "Spatial"), byid = T)
class(train)
#Convertimos la base de datos en datos espaciales
train_sf <- st_as_sf(train, coords=c("lon", "lat"))
st_crs(train_sf) <- 4326
class (train_sf)
#Centroides en matriz
centroides_sf <- st_as_sf(centroides, coords = c("x", "y"))
dist_matrix <-st_distance(x=train_sf, centroides_sf)
dis_min_parque<-apply(dist_matrix, 1, min)
train$distancia_parque <- dis_min_parque
##DISTANCIA A AVENIDAS MAS CERCANAS---------------------------------
train<-st_as_sf(train,coords=c("lon","lat"),crs=4326,remove=FALSE) #as an sf object
avenidas <- opq(bbox=getbb("Bogota Colombia"))%>%
add_osm_feature(key = "highway", value = "secondary")
avenidas_sf <- osmdata_sf(avenidas)
avenidas_geometria <- avenidas_sf$osm_lines%>%
select (osm_id, name)
leaflet()%>%
addTiles()%>%
addPolygons(data = avenidas_geometria, col = "#F72585",
opacity = 0.8, popup= avenidas_geometria)%>%
addCircles(data=train)
#Busco la geometría más cercana
cercano <- st_nearest_feature(train,avenidas_geometria)
#calculo la distancia
dist <-st_distance(train, avenidas_geometria[cercano,], by_element=TRUE)
dist
train$distancia_avenida_principal<-dist
##DISTANCIA A CENTRO COMERCIAL O AREA COMERCIAL----------------------------------------------
available_tags("building")
comercial <- opq(bbox=getbb("Bogota Colombia"))%>%
add_osm_feature(key = "building", value = "commercial")
#librería sf:
comercial_sf <- osmdata_sf(comercial)
comercial_geometria <- comercial_sf$osm_points%>%
select (osm_id)
#En el mapa supermercados y apartamentos por número de cuartos
leaflet()%>%
addTiles()%>%
addCircles(data = comercial_geometria, col = "#c9184a",
opacity = 0.8, popup= comercial_geometria)%>%
addCircles(lng=train$lon,
lat=train$lat,
col = "#0a9396")
#Convierto base train en objeto sf:
train<-st_as_sf(train,coords=c("lon","lat"),crs=4326,remove=FALSE) #as an sf object
#Busco la geometría comercial más cercana:
cercano_com <- st_nearest_feature(train,comercial_geometria)
#calculo la distancia
dist_com <-st_distance(train, comercial_geometria[cercano_com,], by_element=TRUE)
dist_com
train$distancia_comercial<-dist_com
###DISTANCIA A UNIVERSIDADES-------------------------------------
available_tags("building")
universidad <- opq(bbox=getbb("Bogota Colombia"))%>%
add_osm_feature(key = "building", value = "university")
#librería sf:
universidad_sf <- osmdata_sf(universidad)
universidad_geometria <- universidad_sf$osm_polygons%>%
select (osm_id, name)
#Mapa Universidades
leaflet()%>%
addTiles()%>%
addPolygons(data = universidad_geometria, col = "#ffff3f",
opacity = 0.8, popup= universidad_geometria)%>%
addCircles(lng=train$lon,
lat=train$lat,
col = "#0a9396")
#Convierto base train en objeto sf:
train<-st_as_sf(train,coords=c("lon","lat"),crs=4326,remove=FALSE) #as an sf object
#Busco la geometría comercial más cercana:
cercano_uni <- st_nearest_feature(train,universidad_geometria)
#calculo la distancia
dist_uni <-st_distance(train, universidad_geometria[cercano_uni,], by_element=TRUE)
dist_uni
train$distancia_universidad<-dist_uni
##-------------------------------------------------------------------------
##-------------------------------------------------------------------------
##PARA LA BASE DE TESTEO
##-------------------------------------------------------------------------
##-------------------------------------------------------------------------
test<- read_csv("Documents/UNIANDES BIG DATA MACHINE LEARNING/DATOS BOGOTA/test.csv")
glimpse(test)
# Eliminamos las observaciones que no tienen información de latitud o longitud
filtro <- is.na(test$lat) | is.na(test$lon)
test <- test[!filtro, ]
# Observaciones sólo en Bogotá
limites <- getbb("Bogota Colombia")
##Limitamos sólo para Bogotá
filtro1 <- between(test$lon, limites[1, "min"], limites[1, "max"])
filtro2 <- between(test$lat, limites[2, "min"], limites[2, "max"])
test <- test[(filtro1 & filtro2),]
## TEST - DISTANCIA A PARQUES-------------------------------------------------------------
parques <- opq(bbox=getbb("Bogota Colombia"))%>%
add_osm_feature(key = "leisure", value = "park")
#librería sf:
parques_sf <- osmdata_sf(parques)
parques_geometria <- parques_sf$osm_polygons%>%
select (osm_id, name)
#En el mapa parques y apartamentos por número de cuartos
leaflet()%>%
addTiles()%>%
addPolygons(data = parques_geometria, col = "#007200",
opacity = 0.8, popup= parques_geometria)%>%
addCircles(lng=train$lon,
lat=train$lat,
col = color)
#Distancia a parques utilziando centroides
centroides<- gCentroid(as(parques_geometria$geometry, "Spatial"), byid = T)
class(test)
#Convertimos la base de datos en datos espaciales
test_sf <- st_as_sf(test, coords=c("lon", "lat"))
st_crs(test_sf) <- 4326
class (test_sf)
#Centroides en matriz
centroides_sf <- st_as_sf(centroides, coords = c("x", "y"))
dist_matrix <-st_distance(x=test_sf, centroides_sf)
dis_min_parque<-apply(dist_matrix, 1, min)
test$distancia_parque <- dis_min_parque
##TEST - DISTANCIA A AVENIDAS MAS CERCANAS---------------------------------
test<-st_as_sf(test,coords=c("lon","lat"),crs=4326,remove=FALSE) #as an sf object
avenidas <- opq(bbox=getbb("Bogota Colombia"))%>%
add_osm_feature(key = "highway", value = "secondary")
avenidas_sf <- osmdata_sf(avenidas)
avenidas_geometria <- avenidas_sf$osm_lines%>%
select (osm_id, name)
leaflet()%>%
addTiles()%>%
addPolygons(data = avenidas_geometria, col = "#F72585",
opacity = 0.8, popup= avenidas_geometria)%>%
addCircles(data=test)
#Busco la geometría más cercana
cercano_test <- st_nearest_feature(test,avenidas_geometria)
#calculo la distancia
dist_test <-st_distance(test, avenidas_geometria[cercano_test,], by_element=TRUE)
dist_test
test$distancia_avenida_principal<-dist_test
##TEST - DISTANCIA A CENTRO COMERCIAL O AREA COMERCIAL----------------------------------------------
available_tags("building")
comercial_test <- opq(bbox=getbb("Bogota Colombia"))%>%
add_osm_feature(key = "building", value = "commercial")
#librería sf:
comercial_sf <- osmdata_sf(comercial_test)
comercial_geometria <- comercial_sf$osm_points%>%
select (osm_id)
#En el mapa supermercados y apartamentos por número de cuartos
leaflet()%>%
addTiles()%>%
addCircles(data = comercial_geometria, col = "#c9184a",
opacity = 0.8, popup= comercial_geometria)%>%
addCircles(lng=test$lon,
lat=test$lat,
col = "#0a9396")
#Convierto base train en objeto sf:
test<-st_as_sf(test,coords=c("lon","lat"),crs=4326,remove=FALSE) #as an sf object
#Busco la geometría comercial más cercana:
cercano_com <- st_nearest_feature(test,comercial_geometria)
#calculo la distancia
dist_com <-st_distance(test, comercial_geometria[cercano_com,], by_element=TRUE)
dist_com
test$distancia_comercial<-dist_com
###TEST- DISTANCIA A UNIVERSIDADES-------------------------------------
available_tags("building")
universidad <- opq(bbox=getbb("Bogota Colombia"))%>%
add_osm_feature(key = "building", value = "university")
#librería sf:
universidad_sf <- osmdata_sf(universidad)
universidad_geometria <- universidad_sf$osm_polygons%>%
select (osm_id, name)
#Mapa Universidades
leaflet()%>%
addTiles()%>%
addPolygons(data = universidad_geometria, col = "#ffff3f",
opacity = 0.8, popup= universidad_geometria)%>%
addCircles(lng=test$lon,
lat=test$lat,
col = "#0a9396")
#Convierto base train en objeto sf:
test<-st_as_sf(test,coords=c("lon","lat"),crs=4326,remove=FALSE) #as an sf object
#Busco la geometría comercial más cercana:
cercano_uni <- st_nearest_feature(test,universidad_geometria)
#calculo la distancia
dist_uni <-st_distance(test, universidad_geometria[cercano_uni,], by_element=TRUE)
dist_uni
test$distancia_universidad<-dist_uni
################################################################################
train<-st_as_sf(train,coords=c("lon","lat"),crs=4326,remove=FALSE) #as an sf object
avenidas <- opq(bbox=getbb("Bogota Colombia"))%>%
add_osm_feature(key = "highway", value = "secondary")
avenidas_sf <- osmdata_sf(avenidas)
avenidas_geometria <- avenidas_sf$osm_lines%>%
select (osm_id, name)
leaflet()%>%
addTiles()%>%
addPolygons(data = avenidas_geometria, col = "#F72585",
opacity = 0.8, popup= avenidas_geometria)%>%
addCircles(data=train)
#Busco la geometría más cercana
cercano <- st_nearest_feature(train,avenidas_geometria)
#calculo la distancia
dist <-st_distance(train, avenidas_geometria[cercano,], by_element=TRUE)
dist
train$distancia_avenida_principal<-dist
View(train)
p <- ggplot(train, aes(x = distancia_parque)) +
geom_histogram(bins = 50, fill = "gold", alpha = 0.4) +
labs(x = "Distancia mínima a un parque en metros", y = "Cantidad",
title = "Distribución de la distancia a los parques") +
theme_bw()
ggplotly(p)
#Relación del precio vs la distancia al parque
p <- ggplot(train%>%sample_n(1000), aes(x = distancia_parque, y = price)) +
geom_point(col = "gold2", alpha = 0.4) +
labs(x = "Distancia mínima a un parque en metros (log-scale)",
y = "Valor de venta  (log-scale)",
title = "Relación entre la proximidad a un parque y el precio del immueble") +
scale_x_log10() +
scale_y_log10(labels = scales::dollar) +
theme_bw()
ggplotly(p)
test<-st_as_sf(test,coords=c("lon","lat"),crs=4326,remove=FALSE) #as an sf object
avenidas <- opq(bbox=getbb("Bogota Colombia"))%>%
add_osm_feature(key = "police", value = "secondary")
police_sf <- osmdata_sf(police)
police <- opq(bbox=getbb("Bogota Colombia"))%>%
add_osm_feature(key = "police", value = "secondary")
police_sf <- osmdata_sf(police)
police_geometria <- police_sf$osm_point%>%
select (osm_id, name)
leaflet()%>%
addTiles()%>%
addPolygons(data = police_geometria, col = "#F72585",
opacity = 0.8, popup= police_geometria)%>%
addCircles(data=test)
police <- opq(bbox=getbb("Bogota Colombia"))%>%
add_osm_feature(key = "police", value = "secondary")
police_sf <- osmdata_sf(police)
class(train_df)
police_geometria <- police_sf$osm_points %>%
select (osm_id, name)
police_geometria <- police_sf$osm_points %>%
select (osm_points, name)
police_geometria <- police_sf$osm_points %>%
select (osm_id, name)
rlang::last_trace()
police_sf$osm_points %>% select(osm_id, name)
rlang::last_trace()
police_geometria <- police_sf$osm_points %>%
select(osm_id, name),
police_sf <- osmdata_sf(police)
police_geometria <- police_sf$osm_point%>%
select (osm_id, name)
# Cargamos librerias
require("pacman")
# Cargar las librerías listadas e instalarlas en caso de ser necesario
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un polígono
units, # unidades
sf, # Leer/escribir/manipular datos espaciales
osmdata, # Obtener datos de OpenStreetMap (OSM)
tidymodels, # Modelado de datos limpios y ordenados
randomForest, # Modelos de bosque aleatorio
rattle, # Interfaz gráfica para el modelado de datos
spatialsample,# Muestreo espacial para modelos de aprendizaje automático
tmaptools)
available_features() %>% head(20)
available_tags("amenity")
test <- read_csv("E:/USB/MECA-CLASES/5. BIG DATA/TALLER 2/DATA/test.csv")
train <- read_csv("E:/USB/MECA-CLASES/5. BIG DATA/TALLER 2/DATA/train.csv")
bogota<-opq(bbox = getbb("Bogotá Colombia"))
bogota
################################################################################
####              CREAR VARIABLES                                           ####
################################################################################
#------------------------------------------------------------------------------#
# Se crea la variable "parques"
# Se extrae la información de todos los parques de Bogotá
parques <- opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key = "leisure" , value = "park")
# Se cambia el formato para que sea un objeto sf (simple features)
parques_sf <- osmdata_sf(parques)
# De las features del parque, interesa su geomoetría y donde estan ubicados
parques_geometria <- parques_sf$osm_polygons %>%
select(osm_id, name)
# Calculamos el centroide de cada parque para aproximar su ubciacion como un solo punto
centroides <- gCentroid(as(parques_geometria$geometry, "Spatial"), byid = T)
# Creamos el mapa de Bogotá
leaflet() %>%
addTiles() %>%
setView(lng = longitud_central, lat = latitud_central, zoom = 12) %>%
addPolygons(data = parques_geometria, col = "red",weight = 10,
opacity = 0.8, popup = parques_geometria$name) %>%
addCircles(lng = centroides$x,
lat = centroides$y,
col = "darkblue", opacity = 1, radius = 1)
#Plot Map
latitud_central <- mean(train$lat)
longitud_central <- mean(train$lon)
# Creamos el mapa de Bogotá
leaflet() %>%
addTiles() %>%
setView(lng = longitud_central, lat = latitud_central, zoom = 12) %>%
addPolygons(data = parques_geometria, col = "red",weight = 10,
opacity = 0.8, popup = parques_geometria$name) %>%
addCircles(lng = centroides$x,
lat = centroides$y,
col = "darkblue", opacity = 1, radius = 1)
db_sf <- st_as_sf(train, coords = c("lon", "lat"))
# Especificamos el sistema de coordenadas.
st_crs(db_sf) <- 4326
centroides_sf <- st_as_sf(centroides, coords = c("x", "y"))
dist_matrix <- st_distance(x = db_sf, y = centroides_sf)
# Encontramos la distancia mínima a un parque
dist_min_parque <- apply(dist_matrix, 1, min)
# La agregamos como variablea nuestra base de datos original # *****************
train <- train %>% mutate(distancia_parque = dist_min_parque)
p <- ggplot(train, aes(x = distancia_parque)) +
geom_histogram(bins = 50, fill = "gold", alpha = 0.4) +
labs(x = "Distancia mínima a un parque en metros", y = "Cantidad",
title = "Distribución de la distancia a los parques") +
theme_bw()
ggplotly(p)
#Relación del precio vs la distancia al parque
p <- ggplot(train%>%sample_n(1000), aes(x = distancia_parque, y = price)) +
geom_point(col = "gold2", alpha = 0.4) +
labs(x = "Distancia mínima a un parque en metros (log-scale)",
y = "Valor de venta  (log-scale)",
title = "Relación entre la proximidad a un parque y el precio del immueble") +
scale_x_log10() +
scale_y_log10(labels = scales::dollar) +
theme_bw()
ggplotly(p)
p <- ggplot(train, aes(x = distancia_parque)) +
geom_histogram(bins = 50, fill = "gold", alpha = 0.4) +
labs(x = "Distancia mínima a un parque en metros", y = "Cantidad",
title = "Distribución de la distancia a los parques") +
theme_bw()
ggplotly(p)
p <- ggplot(train%>%sample_n(1000), aes(x = distancia_parque, y = price)) +
geom_point(col = "gold2", alpha = 0.4) +
labs(x = "Distancia mínima a un parque en metros (log-scale)",
y = "Valor de venta  (log-scale)",
title = "Relación entre la proximidad a un parque y el precio del immueble") +
scale_x_log10() +
scale_y_log10(labels = scales::dollar) +
theme_bw()
ggplotly(p)
posicion <- apply(dist_matrix, 1, function(x) which(min(x) == x))
areas <- st_area(parques_geometria)
train <- train %>%
mutate(area_parque = as.numeric(areas[posicion]))
p <- ggplot(train%>%sample_n(1000), aes(x = area_parque, y = price)) +
geom_point(col = "gold2", alpha = 0.4) +
labs(x = "Área del parque más cercano (log-scale)",
y = "Valor del arriendo (log-scale)",
title = "Relación entre área de un parque y el precio del immueble") +
scale_x_log10() +
scale_y_log10(labels = scales::dollar) +
theme_bw()
ggplotly(p)
# Extraemos la info de las estaciones del Transmilenio
parada_de_bus <- opq(bbox = getbb("Bogotá Colombia")) %>%
add_osm_feature(key ='amenity' , value = 'bus_station')
# C
parada_de_bus_sf <- osmdata_sf(parada_de_bus)
parada_de_bus_sf_geometria <- parada_de_bus_sf$osm_polygons %>%
select(osm_id, name)
centroides <- gCentroid(as(parada_de_bus_sf_geometria$geometry, "Spatial"), byid = T)
centroides <-st_centroid(parada_de_bus_sf_geometria$geometry)
leaflet() %>%
addTiles() %>%
setView(lng = longitud_central, lat = latitud_central, zoom = 12) %>%
addPolygons(data = parada_de_bus_sf_geometria, col = "red",weight = 10,
opacity = 0.8, popup = parada_de_bus_sf_geometria$name) %>%
addCircles(data=centroides,col = 'blue' , opacity = 0.5, radius = 1)
#lng = centroides$x, Por qué no pusimos esto?
#            lat = centroides$y,
#            col = '#698B69' , opacity = 0.5, radius = 1)
# Primero tomamos nuestros datos y los convertimos al formato sf (simple features)
# Esto para que esten en el mismo formato de los paraderos y poder calcuar distancias.
train_sf <- st_as_sf(train, coords = c("lon", "lat"), crs=4326)
# convertimos los centroides a formato sf(simple features)
centroides_sf <- st_as_sf(centroides, coords = c("lon", "lat"), crs=4326)
centroides_sf <- do.call(rbind, st_geometry(centroides)) %>%
as_tibble() %>% setNames(c("lon","lat"))
centroides_sf <- st_as_sf(centroides_sf, coords = c("lon", "lat"), crs=4326)
centroides <-st_centroid(parada_de_bus_sf_geometria$geometry)
