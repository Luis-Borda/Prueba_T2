cfp <- ggplot(train%>%sample_n(1000), aes(x = dist_minc, y = price)) +
geom_point(col = "darkblue", alpha = 0.4) +
labs(x = "Distancia mínima a los colegios en metros (log-scale)",
y = "Valor de venta  (log-scale)",
title = "Relación entre la proximidad a los colegios y el precio del immueble") +
scale_x_log10() +
scale_y_log10(labels = scales::dollar) +
theme_bw()
ggplotly(cfp)
cole_sf <- st_as_sf(test, coords = c("lon", "lat"))
# Especificamos el sistema de coordenadas.
st_crs(cole_sf) <- 4326
# Calculamos las distancias para cada combinacion immueble - colegios
dist_matrix <- st_distance(x = jar_sf, y = puntos_jar)
# Encontramos la distancia mínima a un restaurante
dist_min <- apply(dist_matrix, 1, min)
# La agregamos como variablea nuestra base de datos original
test <- test %>% mutate(puntos_jar = dist_min)
# Calculamos las distancias para cada combinacion immueble - colegios
dist_matrix <- st_distance(x = cole_sf, y = puntos_SC)
View(train)
View(test)
View(train)
dist_matrixc <- st_distance(x = cole_sf, y = puntos_SC)
# Encontramos la distancia mínima a un restaurante
dist_minc <- apply(dist_matrixc, 1, min)
# La agregamos como variablea nuestra base de datos original
test <- test %>% mutate(puntos_SC = dist_minc)
train <- train %>% mutate(dist_cole = dist_minc)
dist_minc <- apply(dist_matrixc, 1, min)
train <- train %>% mutate(dist_cole = dist_minc)
train <- train %>% mutate(puntos_SC = dist_minc)
# Calculamos las distancias para cada combinacion immueble - colegios
dist_matrixc <- st_distance(x = cole_sf, y = puntos_SC)
dist_minc <- apply(dist_matrixc, 1, min)
# La agregamos como variablea nuestra base de datos original
train <- train %>% mutate(puntos_SC = dist_minc)
train <- train %>% mutate(puntos_SC = dist_minc)
dist_minc <- apply(dist_matrixc, 1, min)
colegios<- bogota %>%
add_osm_feature(key="amenity",value="school") %>%
osmdata_sf()
puntos_SC<-colegios$osm_point
head(puntos_SC)
ggplot()+
geom_sf(data=puntos_colegios) +
theme_bw()
--------
cole_sf <- st_as_sf(train, coords = c("lon", "lat"))
cole_sf <- st_as_sf(train, coords = c("lon", "lat"))
st_crs(cole_sf) <- 4326
dist_matrixc <- st_distance(x = cole_sf, y = puntos_SC)
# Encontramos la distancia mínima a los colegios
dist_minc <- apply(dist_matrixc, 1, min)
# La agregamos como variablea nuestra base de datos original
train <- train %>% mutate(puntos_SC = dist_minc)
###TRAIN------------
class(train)
p_load(sfheaders)
train_df<-sf_to_df(train, fill = TRUE)
class(train_df)
write_csv(train_df, file="Bogota_train.csv")
##TEST--------------------------
class(test)
test_df<-sf_to_df(test, fill = TRUE)
class(test_df)
write_csv(test_df, file="Bogota_test.csv")
####
##
View(test)
###TRAIN------------
class(train)
p_load(sfheaders)
train_df<-sf_to_df(train, fill = TRUE)
class(train_df)
write_csv(train_df, file="train.csv")
##TEST--------------------------
class(test)
test_df<-sf_to_df(test, fill = TRUE)
class(test_df)
write_csv(test_df, file="test.csv")
####
##
#------------------------------------------------------------------------------
#
#                               Taller 2
#
#   Grupo 5:  Felipe Vargas.
#             Julián Muñoz .
#             Sebastián Potosí.
#             Luis Borda.
#
#-------------------------------------------------------------------------------
#-------------------------------------------------------------------------------
#                      2. Datos y pasos previos
#-------------------------------------------------------------------------------
#Limpieza de area de trabajo ---------------------------------------------------
rm(list = ls())
# Cargamos librerias
require("pacman")
# Cargar las librerías listadas e instalarlas en caso de ser necesario
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un polígono
units, # unidades
sf, # Leer/escribir/manipular datos espaciales
osmdata, # Obtener datos de OpenStreetMap (OSM)
tidymodels, # Modelado de datos limpios y ordenados
randomForest, # Modelos de bosque aleatorio
rattle, # Interfaz gráfica para el modelado de datos
spatialsample,# Muestreo espacial para modelos de aprendizaje automático
tmaptools)
test <- read_csv("C:\Users\lordb\Documents\Prueba_T2\SCRIPT\test.csv")
test <- read_csv("C:\Users\lordb\Documents\Prueba_T2\SCRIPT\test.csv")
test <- read_csv("C:\Users\lordb\Documents\Prueba_T2\SCRIPT\test.csv")
test <- read_csv("C:\Users\lordb\Documents\Prueba_T2\SCRIPT\test.csv")
#Limpieza de area de trabajo ---------------------------------------------------
rm(list = ls())
# Cargamos librerias
require("pacman")
# Cargar las librerías listadas e instalarlas en caso de ser necesario
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un polígono
units, # unidades
sf, # Leer/escribir/manipular datos espaciales
osmdata, # Obtener datos de OpenStreetMap (OSM)
tidymodels, # Modelado de datos limpios y ordenados
randomForest, # Modelos de bosque aleatorio
rattle, # Interfaz gráfica para el modelado de datos
spatialsample,# Muestreo espacial para modelos de aprendizaje automático
tmaptools)
test <- read_csv("C:\Users\lordb\Documents\Prueba_T2\SCRIPT\test.csv")
require("pacman")
# Cargar las librerías listadas e instalarlas en caso de ser necesario
p_load(tidyverse, # Manipular dataframes
rio, # Importar datos fácilmente
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un polígono
units, # unidades
sf, # Leer/escribir/manipular datos espaciales
osmdata, # Obtener datos de OpenStreetMap (OSM)
tidymodels, # Modelado de datos limpios y ordenados
randomForest, # Modelos de bosque aleatorio
rattle, # Interfaz gráfica para el modelado de datos
spatialsample,# Muestreo espacial para modelos de aprendizaje automático
tmaptools,
readr)
test <- read_csv("C:\Users\lordb\Documents\Prueba_T2\SCRIPT\test.csv")
train <- read_csv("C:\Users\lordb\Documents\Prueba_T2\SCRIPT\train.csv")
library(readr)
test <- read_csv("C:\Users\lordb\Documents\Prueba_T2\SCRIPT\test.csv")
test <- read_csv("C:/Users/lordb/Documents/Prueba_T2/SCRIPT/test.csv")
train <- read_csv("C:/Users/lordb/Documents/Prueba_T2/SCRIPT/train.csv")
train$description [1]
train <- train %>%
mutate(piso_info= str_extract(description, "(\\w+|\\d+) piso (\\w+|\\d+)"))
numeros_escritos <- c("uno|primero|primer", "dos|segundo|segund", "tres|tercero|tercer", "cuatro|cuarto", "cinco|quinto", "seis|sexto", "siete|septimo", "ocho|octavo", "nueve|noveno", "diez|decimo|dei")
numeros_numericos <- as.character(1:10)
train <- train %>%
mutate(piso_info = str_replace_all(piso_info, setNames(numeros_numericos,numeros_escritos)))
train <- train %>%
mutate(piso_numerico = as.integer(str_extract(piso_info, "\\d+")))
train <- train %>%
mutate(piso_numerico = ifelse(piso_numerico > 20, NA, piso_numerico))
train %>%
filter(property_type_2 == "Apartamento") %>%
count(piso_numerico)
train <- train %>%
mutate(piso_numerico = ifelse(piso_numerico > 20, NA, piso_numerico))
train %>%
filter(property_type_2 == "Apartamento") %>%
count(piso_numerico)
train %>%
filter(property_type_2 == "Apartamento") %>%
count(piso_numerico)
train %>%
filter(property_type_2 == "Apartamento") %>%
count(piso_numerico)
View(train)
train %>%
filter(property_type_2 == "Apartamento") %>%
count(piso_numerico)
train %>%
filter(property_type_2 == "Apartamento") %>%
count(piso_numerico)
View(train)
train %>%
filter(property_type == "Apartamento") %>%
count(piso_numerico)
train %>%
filter(property_type == "Casa") %>%
count(piso_numerico)
train <- db %>%
mutate(piso_numerico = replace_na(piso_numerico, 1))
train <- train %>%
mutate(piso_numerico = replace_na(piso_numerico, 1))
##Volvemos todo minuscula y eliminamos tildes tildes
train$description <- tolower(train$description)
train$description <- iconv(train$description, from = "UTF-8", to = "ASCII//TRANSLIT")
substr(train$description, 1, 500)
Metros <- str_extract(train$description, "\\d+\\s*(mts|m2|metros)")
train <- cbind(train, area = Metros)
Area_sin_texto <- gsub("m2", "", Metros)
Area_sin_texto <- gsub("[[:alpha:]]", "", Area_sin_texto)
as.numeric(Area_sin_texto)
train <- cbind(train, area_m2 = Area_sin_texto)
sapply(train, function(x) sum(is.na(x)))
train$area_tot <- ifelse(is.na(train$surface_covered), train$area_m2, train$surface_covered)
sapply(train, function(x) sum(is.na(x)))
View(train)
library(pacman)
library(leaflet)
library(stringi)
# Cargar las librerías listadas e instalarlas en caso de ser necesario
p_load(tidyverse, # Manipular dataframes
rio, # Import data easily
plotly, # Gráficos interactivos
leaflet, # Mapas interactivos
rgeos, # Calcular centroides de un poligono
tmaptools, # geocode_OSM()
sf, # Leer/escribir/manipular datos espaciales
osmdata, # Traer info geo espacial (limites bogta, etc)
tidymodels, #para modelos de ML
skimr,
stargazer, #Mostrar modelos de ML
mapview, # Mapas estaticos
VIM,
discrim,
kknn,
stargazer,
readr)
test <- read_csv("C:/Users/lordb/Documents/Prueba_T2/SCRIPT/test.csv")
train <- read_csv("C:/Users/lordb/Documents/Prueba_T2/SCRIPT/train.csv")
dim(test)
dim(train)
glimpse(test)
glimpse(train)
train %>%
count(property_type)
test %>%
count(property_type)
train %>%
count(operation_type)
test %>%
count(operation_type)
train %>%
count(rooms)
test %>%
count(rooms)
skim(train)
skim(test)
test %>%
summarise_all(~sum(is.na(.)))
train %>%
summarise_all(~sum(is.na(.)))
sapply(train, function(x) sum(is.na(x)))
sapply(test, function(x) sum(is.na(x)))
table(train$rooms) #Se evidencia que la mayoría de viviendas tienen 3 cuartos, por lo tanto se imputan los datos con moda = 3
table(test$price) #Se evidencia que la mayoría de viviendas tienen 3 dormitorios, por lo tanto se imputan los datos con moda = 3
table(train$bathrooms) #Se evidencia que la mayoría de viviendas tienen 2 cuartos, por lo tanto se imputan los datos con moda = 2
m_sup_cubierta <- median(train$surface_covered, na.rm = T)
m_sup_total <- median(train$surface_total, na.rm = T)
train <- train %>%
mutate(rooms= replace_na(rooms, 3), #No se coloca bedrooms, toda vez que, para train no se evidencian NA's
bathrooms = replace_na(bathrooms, 2),
surface_covered = replace_na(surface_covered, m_sup_cubierta),
surface_total = replace_na(surface_total, m_sup_total))
m_test_cubierta <- median(test$surface_covered, na.rm = T)
m_test_total <- median(test$surface_total, na.rm = T)
test <- test %>%
mutate(rooms= replace_na(rooms, 3),
bathrooms = replace_na(bathrooms, 2),
surface_covered = replace_na(surface_covered, m_test_cubierta),
surface_total = replace_na(surface_total, m_test_total))
summary(train$price) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1=scales::dollar(V1)) # precios de $1.650.000.000 en Chapi?
train <- train %>% mutate (precio_mt2= price / surface_total)
summary(train$precio_mt2) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1=scales::dollar(V1)) #Se evidencia que precio por metro cuadrado minimo $20 mil y max $40 millones
Ploty_log <- ggplot(train, aes(x = precio_mt2)) + geom_histogram(fill="gold2", alpha= 0.9) +
labs(x="Valor de venta (log-scale)", y="Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplotly(Ploty_log)
Ploty <- ggplot(train, aes(x = price)) + geom_histogram(fill="gold2", alpha= 0.9) +
labs(x="Valor de venta (log-scale)", y="Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplotly(Ploty)
leaflet() %>%
addTiles() %>%
addCircles(lng= train$lon,
lat= train$lat)
limites <- getbb("Localidad Chapinero") #b box
train <- train %>%
filter(
between(lon, limites[1, "min"], limites[1, "max"]) &
between(lat, limites[2, "min"], limites[2, "max"])
)
train <- train %>%
mutate(color = case_when(property_type == "Apartamento" ~ "red",
property_type == "Casa"~ "blue"))
#Plot Map
latitud_central <- mean(train$lat)
longitud_central <- mean(train$lon)
train <- train %>%
mutate(precio_por_mt2_sc=((precio_mt2 - min(precio_mt2))/max(precio_mt2) - min(precio_mt2)))
html <- paste0("<b>Precio:</b>",
scales::dollar(train$price),
"<br> <b>Area:</b>",
as.integer(train$surface_total), "mt2",
"<br> <b>Tipo de inmueble:</br>",
train$property_type,
"<br> <b>Numero de alcobas:</b>",
as.integer(train$rooms),
"<br><b>Numero de baños:</b>",
as.integer(train$bathrooms))
m <- leaflet() %>%
addTiles() %>%
setView(lng= longitud_central, lat = latitud_central, zoom= 12) %>%
addCircles(lng = train$lon,
lat = train$lat,
col = train$color,
fillOpacity = 0.5,
opacity = 0.5,
radius = train$precio_por_mt2_sc*10,
popup = html)
View(train)
m_sup_cubierta <- median(train$surface_covered, na.rm = T)
m_sup_total <- median(train$surface_total, na.rm = T)
m_sup_cubierta <- median(test$surface_covered, na.rm = T)
m_sup_total <- median(test$surface_total, na.rm = T)
test <- test %>%
mutate(rooms= replace_na(rooms, 3), #No se coloca bedrooms, toda vez que, para train no se evidencian NA's
bathrooms = replace_na(bathrooms, 2),
surface_covered = replace_na(surface_covered, m_sup_cubierta),
surface_total = replace_na(surface_total, m_sup_total))
train <- train %>%
mutate(rooms= replace_na(rooms, 3), #No se coloca bedrooms, toda vez que, para train no se evidencian NA's
bathrooms = replace_na(bathrooms, 2),
surface_covered = replace_na(surface_covered, m_sup_cubierta),
surface_total = replace_na(surface_total, m_sup_total))
m_test_cubierta <- median(train$surface_covered, na.rm = T)
m_test_total <- median(train$surface_total, na.rm = T)
m_test_cubierta <- median(test$surface_covered, na.rm = T)
m_test_total <- median(test$surface_total, na.rm = T)
test <- test %>%
mutate(rooms= replace_na(rooms, 3),
bathrooms = replace_na(bathrooms, 2),
surface_covered = replace_na(surface_covered, m_test_cubierta),
surface_total = replace_na(surface_total, m_test_total))
train <- train %>%
mutate(rooms= replace_na(rooms, 3),
bathrooms = replace_na(bathrooms, 2),
surface_covered = replace_na(surface_covered, m_test_cubierta),
surface_total = replace_na(surface_total, m_test_total))
summary(train$price) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1=scales::dollar(V1)) # precios de $1.650.000.000 en Chapi?
summary(test$price) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1=scales::dollar(V1)) # precios de $1.650.000.000 en Chapi?
summary(train$price) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1=scales::dollar(V1)) # precios de $1.650.000.000 en Chapi?
summary(test$price) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1=scales::dollar(V1)) # precios de $1.650.000.000 en Chapi?
train <- train %>% mutate (precio_mt2= price / surface_total)
test <- test %>% mutate (precio_mt2= price / surface_total)
summary(train$precio_mt2) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1=scales::dollar(V1)) #Se evidencia que precio por metro cuadrado minimo $20 mil y max $40 millones
summary(test$precio_mt2) %>%
as.matrix() %>%
as.data.frame() %>%
mutate(V1=scales::dollar(V1)) #Se evidencia que precio por metro cuadrado minimo $20 mil y max $40 millones
###
Ploty_log <- ggplot(test, aes(x = precio_mt2)) + geom_histogram(fill="gold2", alpha= 0.9) +
labs(x="Valor de venta (log-scale)", y="Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplotly(Ploty_log)
Ploty <- ggplot(test, aes(x = price)) + geom_histogram(fill="gold2", alpha= 0.9) +
labs(x="Valor de venta (log-scale)", y="Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplotly(Ploty)
Ploty_log <- ggplot(train, aes(x = precio_mt2)) + geom_histogram(fill="gold2", alpha= 0.9) +
labs(x="Valor de venta (log-scale)", y="Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplotly(Ploty_log)
Ploty <- ggplot(train, aes(x = price)) + geom_histogram(fill="gold2", alpha= 0.9) +
labs(x="Valor de venta (log-scale)", y="Cantidad") +
scale_x_log10(labels = scales::dollar) +
theme_bw()
ggplotly(Ploty)
leaflet() %>%
addTiles() %>%
addCircles(lng= train$lon,
lat= train$lat)
leaflet() %>%
addTiles() %>%
addCircles(lng= test$lon,
lat= test$lat)
limites <- getbb("Localidad Chapinero") #b box
test <- test %>%
filter(
between(lon, limites[1, "min"], limites[1, "max"]) &
between(lat, limites[2, "min"], limites[2, "max"])
)
test <- test %>%
mutate(color = case_when(property_type == "Apartamento" ~ "red",
property_type == "Casa"~ "blue"))
View(train)
test <- test %>%
mutate(color = case_when(property_type == "Apartamento" ~ "red",
property_type == "Casa"~ "blue"))
train <- train %>%
filter(
between(lon, limites[1, "min"], limites[1, "max"]) &
between(lat, limites[2, "min"], limites[2, "max"])
)
train <- train %>%
mutate(color = case_when(property_type == "Apartamento" ~ "red",
property_type == "Casa"~ "blue"))
latitud_central <- mean(train$lat)
longitud_central <- mean(train$lon)
latitud_central <- mean(test$lat)
longitud_central <- mean(test$lon)
train <- train %>%
mutate(precio_por_mt2_sc=((precio_mt2 - min(precio_mt2))/max(precio_mt2) - min(precio_mt2)))
html <- paste0("<b>Precio:</b>",
scales::dollar(train$price),
"<br> <b>Area:</b>",
as.integer(train$surface_total), "mt2",
"<br> <b>Tipo de inmueble:</br>",
train$property_type,
"<br> <b>Numero de alcobas:</b>",
as.integer(train$rooms),
"<br><b>Numero de baños:</b>",
as.integer(train$bathrooms))
m <- leaflet() %>%
addTiles() %>%
setView(lng= longitud_central, lat = latitud_central, zoom= 12) %>%
addCircles(lng = train$lon,
lat = train$lat,
col = train$color,
fillOpacity = 0.5,
opacity = 0.5,
radius = train$precio_por_mt2_sc*10,
popup = html)
test <- test %>%
mutate(precio_por_mt2_sc=((precio_mt2 - min(precio_mt2))/max(precio_mt2) - min(precio_mt2)))
html <- paste0("<b>Precio:</b>",
scales::dollar(train$price),
"<br> <b>Area:</b>",
as.integer(train$surface_total), "mt2",
"<br> <b>Tipo de inmueble:</br>",
test$property_type,
"<br> <b>Numero de alcobas:</b>",
as.integer(test$rooms),
"<br><b>Numero de baños:</b>",
as.integer(test$bathrooms))
m2 <- leaflet() %>%
addTiles() %>%
setView(lng= longitud_central, lat = latitud_central, zoom= 12) %>%
addCircles(lng = test$lon,
lat = test$lat,
col = test$color,
fillOpacity = 0.5,
opacity = 0.5,
radius = test$precio_por_mt2_sc*10,
popup = html)
###TRAIN------------
class(train)
p_load(sfheaders)
train_df<-sf_to_df(train, fill = TRUE)
train_df<-sf_to_df(train, fill = TRUE)
class(train)
p_load(sfheaders)
train_df<-sf_to_df(train, fill = TRUE)
write_csv(train_df, file="trainf.csv")
train_df<-sf_to_df(train, fill = TRUE)
train_df2<-sf_to_df(train, fill = TRUE)
train_df<-sf_to_df(train, fill = TRUE)
p_load(sfheaders)
train_df<-sf_to_df(train, fill = TRUE)
View(train)
train_df<-sf_to_df(train, fill = TRUE)
class(test)
test_df<-sf_to_df(test, fill = TRUE)
?export_list(trainf)
write_csv(train_df, file="trainf.csv")
train_df<-sf_to_df(train, fill = TRUE)
train_df<-sf_to_df(train, fill = TRUE)
